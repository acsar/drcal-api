#!/usr/bin/env node

/**
 * Script para verificar a configura√ß√£o do Redis
 * Uso: node scripts/check-redis.js
 */

require('dotenv').config();
const Redis = require('ioredis');

console.log('üîç Verificando configura√ß√£o do Redis...\n');

// Verificar vari√°veis de ambiente
console.log('üìã Vari√°veis de ambiente:');
console.log(`   REDIS_HOST: ${process.env.REDIS_HOST || 'localhost (padr√£o)'}`);
console.log(`   REDIS_PORT: ${process.env.REDIS_PORT || '6379 (padr√£o)'}`);
console.log(`   Configura√ß√£o: Sem autentica√ß√£o (adequado para Docker)`);

// Configura√ß√£o para teste (sem autentica√ß√£o)
const redisConfig = {
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT) || 6379,
  connectTimeout: 5000,
  commandTimeout: 3000,
  lazyConnect: false,
};

console.log('\nüîå Tentando conectar ao Redis...');

const redis = new Redis(redisConfig);

redis.on('connect', () => {
  console.log('‚úÖ Conectado ao Redis com sucesso!');
  
  // Testar opera√ß√µes b√°sicas
  testRedisOperations();
});

redis.on('error', (error) => {
  console.log('‚ùå Erro na conex√£o Redis:');
  console.log(`   ${error.message}`);
  
  if (error.message.includes('ECONNREFUSED')) {
    console.log('\nüîå Redis n√£o est√° rodando:');
    console.log('   - Verifique se Redis est√° instalado');
    console.log('   - Inicie o Redis: redis-server');
    console.log('   - Em Docker: verifique se o container Redis est√° rodando');
    console.log('   - Verifique se REDIS_HOST e REDIS_PORT est√£o corretos');
  }
  
  process.exit(1);
});

async function testRedisOperations() {
  try {
    console.log('\nüß™ Testando opera√ß√µes b√°sicas...');
    
    // Teste 1: PING
    const pingResult = await redis.ping();
    console.log(`   ‚úÖ PING: ${pingResult}`);
    
    // Teste 2: SET/GET
    await redis.set('test_key', 'test_value');
    const getResult = await redis.get('test_key');
    console.log(`   ‚úÖ SET/GET: ${getResult}`);
    
    // Teste 3: DEL
    await redis.del('test_key');
    console.log('   ‚úÖ DEL: chave removida');
    
    // Teste 4: Verificar configura√ß√£o
    const configResult = await redis.config('GET', 'requirepass');
    console.log(`   ‚úÖ Config requirepass: ${configResult[1] || 'n√£o definida'}`);
    
    console.log('\nüéâ Todos os testes passaram! Redis est√° funcionando corretamente.');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('   1. Inicie a API: npm start');
    console.log('   2. Verifique os logs de conex√£o');
    console.log('   3. Teste as funcionalidades da API');
    
    process.exit(0);
    
  } catch (error) {
    console.log(`‚ùå Erro nos testes: ${error.message}`);
    process.exit(1);
  }
}

// Timeout para evitar travamento
setTimeout(() => {
  console.log('\n‚è∞ Timeout: Redis n√£o respondeu em 10 segundos');
  process.exit(1);
}, 10000); 